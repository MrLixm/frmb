{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>Frmb is a python library and CLI to convert file structures to right-click  context menu for Windows.</p> <p></p> <p>You can find an example of file-structure here:  https://github.com/MrLixm/lxm-frmb-projects</p>"},{"location":"#design","title":"design","text":"<p>frmb is a python module that take a file structure represented by a root directory as input and produce Windows registry files (.reg) as output. Once executed, those reg file create or remove context-menus.</p> <p>The file structure is built out of <code>.frmb</code> file (json format) with directories. Each frmb file represent a context menu entry and its configuration, with directories allowing for nested context menus entries.</p> <p>Note the approach is not dynamic, every modification to the file structure need to be \"baked\" again as a reg file on each update.</p>"},{"location":"#installation","title":"installation","text":"<p><code>frmb</code> has no dependencies, simply check the <code>pyproject.toml</code> for the minimal python version required.</p>"},{"location":"#with-pip","title":"with <code>pip</code>","text":"<p>Assuming you are already in the venv you want to install to:</p> <pre><code>pip install git+https://github.com/MrLixm/frmb.git@main\n</code></pre>"},{"location":"#with-poetry","title":"with <code>poetry</code>","text":"<p>Add the following to your existing project :</p> pyproject.toml<pre><code>[tool.poetry.dependencies]\nfrmb = { git = \"https://github.com/MrLixm/frmb.git\", branch = \"main\"}\n</code></pre>"},{"location":"#manually","title":"manually","text":"<p>Assuming <code>git</code> is installed on your system, you just need to add its parent directory to your <code>PYTHONPATH</code>.</p> powershell<pre><code>cd myenv/\ngit clone https://github.com/MrLixm/frmb.git\n# only set for the current session\n$env:PYTHONPATH += \";$((Get-Item .).FullName)\"\n</code></pre>"},{"location":"contributing/","title":"Contribution guidelines","text":"<p>Thanks for taking in some of your time to invest in this project !</p> <p>To make the development process better for everyone, please read and apply the following guidelines.</p> <p>As much as it is appreciated you contribute to this project, it is possible we don't agree on your contribution, even how good or proved it is. In that case please remember that the owners have the right to decide in which direction their project should go. You are free to create your own fork !</p>"},{"location":"contributing/#what-to-contribute","title":"what to contribute","text":"<p>You have found a bug/issue or wish to submit an enhancement suggestion ?</p> <p>Open a new issue.</p> <p>You have already read the code and found how to modify it to apply you changes ?</p> <p>Still open an issue first please ! Even if it's a simple change it might not be wanted for the project and that would be sad to work on a pull-request that will never be merged.</p>"},{"location":"contributing/#working-on-the-code","title":"working on the code","text":"<p>You have opened an issue OR found an issue that have been approved, you can start by forking this repository.</p> <p>Clone your fork locally and start working on your changes.</p> <p>Once satisfied you can open a pull-request to merge the desired branch of your fork, to the <code>main</code> branch of this repository.</p>"},{"location":"contributing/#setting-up-the-project","title":"setting up the project","text":"<ul> <li><code>git clone</code> the repository (probably your fork)</li> <li><code>cd</code> at the repository root</li> <li>ensure poetry is installed on your system</li> <li><code>poetry install</code> to create a venv with the dependencies</li> </ul>"},{"location":"contributing/#running-unittests","title":"running unittests","text":"<pre><code>pytest ./tests\n</code></pre>"},{"location":"contributing/#requirements","title":"requirements","text":"<ul> <li>Ensure the Black formatter is   enabled (triggered on each save) and all section of code you wrote have been   formatted.</li> <li>Ensure you have successfully run unittests before creating the PR.</li> <li>Ensure you have some of your favorite hot beverage available for drinking to   ensure maximum confort during development.</li> </ul>"},{"location":"contributing/#code-style","title":"code style","text":"<p>Try to keep things simple (avoiding overengineering), and most importantly easily understandable.</p>"},{"location":"contributing/#black","title":"black","text":"<p>For black it is recommended to enforce use of trailling comma when necessary. Example : <pre><code>class Foo:\n    def some_really_really_long_method(self, myparam: str, some_other_param: dict[str, str]) -&gt; int:\n        pass\n</code></pre> Would be formatted by black as </p> <pre><code>class Foo:\n    def some_really_really_long_method(\n        self, myparam: str, some_other_param: dict[str, str]\n    ) -&gt; int:\n        pass\n</code></pre> <p>But it is recommended to add a tailling comma after <code>dict[str, str]</code> to force line breaks :</p> <pre><code>class Foo:\n    def some_really_really_long_method(\n        self,\n        myparam: str,\n        some_other_param: dict[str, str],\n    ) -&gt; int:\n        pass\n</code></pre>"},{"location":"contributing/#naming-conventions","title":"naming conventions","text":"<p>Follow PEP8 conventions.</p> <ul> <li>variables, functions and methods are <code>snake_case</code></li> <li>classes are <code>PascalCase</code></li> <li>global variables are usually <code>UPPERCASE</code>/<code>UPPER_CASE</code> but MIGHT be <code>snake_case</code></li> </ul>"},{"location":"contributing/#functions-and-methods","title":"functions and methods:","text":"<ul> <li>should start with a verb</li> <li><code>has...</code> and <code>is...</code> must return a <code>bool</code>-like object (ex: can return a str or None)</li> </ul>"},{"location":"contributing/#modules","title":"modules :","text":"<p>Extensive use of private modules, prefixed by a <code>_</code>. Anything private is not considered to be part of the public API, this means that major changes to them are not considered \"breaking\".</p> <p>As an example, user cannot do this :</p> <pre><code>from my_module._window import MainWindow\n</code></pre> <p>The useful <code>MainWindow</code> object is exposed in the <code>my_module</code>'s <code>__init__</code> :</p> <pre><code>from my_module import MainWindow\n</code></pre> <p>this allow us to freely rename/move <code>_window.py</code> without being considered a breaking change as it is not supposed to be accessed outside the package.</p> <p>The logic is also applied similarly to functions/methods/...</p>"},{"location":"contributing/#version-control","title":"version control","text":"<p>Using <code>git</code> as you have probably noticed. </p>"},{"location":"contributing/#commits","title":"commits","text":"<p>To ensure a clean commit history please try to apply the following rules :</p> <ul> <li>separate the commit title and body with a blanck line</li> <li>the commit title must be around 72 characters max (80max)</li> <li>commits try to follow the conventional commits specification :</li> <li><code>&lt;type&gt;(&lt;optional scope&gt;): &lt;description&gt;</code></li> <li>where <code>&lt;type&gt;</code> is usually <code>fix</code> or <code>feat</code> (see linked spec for others)</li> </ul>"},{"location":"public-api/","title":"Public API","text":"<p>Those are the available objects that can be imported from :</p> <pre><code>import frmb\n</code></pre>"},{"location":"public-api/#frmb.read_hierarchy_from_root","title":"read_hierarchy_from_root","text":"<pre><code>read_hierarchy_from_root(\n    root_dir: Path,\n) -&gt; list[FrmbFormat]\n</code></pre> <p>Parse the given directory to build a hierarchy of Frmb objects that represent the context-menu.</p> <p>Parameters:</p> <ul> <li> <code>root_dir</code>             (<code>Path</code>)         \u2013          <p>directory reprensenting the start of the context-menu entries hierarchy.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[FrmbFormat]</code>         \u2013          <p>list of Frmb files found at root.</p> </li> </ul>"},{"location":"public-api/#frmb.validate_entry_hierarchy","title":"validate_entry_hierarchy","text":"<pre><code>validate_entry_hierarchy(\n    hierarchy: Iterable[FrmbFormat], __child_number: int = 0\n) -&gt; tuple[\n    dict[FrmbFormat, list[str]], dict[FrmbFormat, list[str]]\n]\n</code></pre> <p>Return issues the given hierarchy might have.</p> <p>Recursive function.</p> <p>Parameters:</p> <ul> <li> <code>hierarchy</code>             (<code>Iterable[FrmbFormat]</code>)         \u2013          <p>a list of FrmbFormat that correspond to the root entries of a context menu.</p> </li> <li> <code>__child_number</code>             (<code>int</code>, default:                 <code>0</code> )         \u2013          <p>private, number of nested entry we currently have for a root entry.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>tuple[dict[FrmbFormat, list[str]], dict[FrmbFormat, list[str]]]</code>         \u2013          <p>tuple of errors[\"frmb instance\", \"list of errors\"], warnings[\"frmb instance\", \"list of warnings\"]</p> </li> </ul>"},{"location":"public-api/#frmb.generate_reg_from_hierarchy","title":"generate_reg_from_hierarchy","text":"<pre><code>generate_reg_from_hierarchy(\n    hierachy: list[FrmbFormat],\n    header_comments: list[str] | None = None,\n    add_keys: bool = True,\n) -&gt; list[str]\n</code></pre> <p>Generate a valid reg file from the given hierarchy of Frmb instances.</p> <p>Parameters:</p> <ul> <li> <code>hierachy</code>             (<code>list[FrmbFormat]</code>)         \u2013          <p>content of the reg file as list of root keys.</p> </li> <li> <code>header_comments</code>             (<code>list[str] | None</code>, default:                 <code>None</code> )         \u2013          <p>list of line that should be added in the header comment section</p> </li> <li> <code>add_keys</code>             (<code>bool</code>, default:                 <code>True</code> )         \u2013          <p>True to create a reg file to install, False to create the inverse that uninstall.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[str]</code>         \u2013          <p>a reg file as a list of line</p> </li> </ul>"},{"location":"public-api/#frmb.FrmbFormat","title":"FrmbFormat","text":"<p>A dataclass for the Frmb file format.</p>"},{"location":"public-api/#frmb.FrmbFormat.children","title":"children","text":"<pre><code>children: tuple[FrmbFormat]\n</code></pre> <p>Nested entries.</p>"},{"location":"public-api/#frmb.FrmbFormat.command","title":"command","text":"<pre><code>command: tuple[str]\n</code></pre> <p>Command to call when clicking the entry. As list of arguments.</p>"},{"location":"public-api/#frmb.FrmbFormat.icon","title":"icon","text":"<pre><code>icon: Path | None\n</code></pre> <p>Absolute path to an .ico file.</p>"},{"location":"public-api/#frmb.FrmbFormat.identifier","title":"identifier","text":"<pre><code>identifier: str\n</code></pre> <p>Unique identifier used to store the key in the registry.</p>"},{"location":"public-api/#frmb.FrmbFormat.name","title":"name","text":"<pre><code>name: str\n</code></pre> <p>Label displayed in the GUI</p>"},{"location":"public-api/#frmb.FrmbFormat.paths","title":"paths","text":"<pre><code>paths: tuple[str]\n</code></pre> <p>Only for root entries. Registry paths that must have this entry.</p>"},{"location":"public-api/#frmb.FrmbFormat.from_file","title":"from_file","text":"<pre><code>from_file(\n    path: Path,\n    root_dir: Path,\n    children: list[FrmbFormat] = None,\n)\n</code></pre> <p>Get an instance from a serialized file on disk.</p> <p>Parameters:</p> <ul> <li> <code>path</code>             (<code>Path</code>)         \u2013          <p>filesystem path to an existing file, expected to be in the json format.</p> </li> <li> <code>root_dir</code>             (<code>Path</code>)         \u2013          <p>filesystem path to an existing directory, that is the root of the hierarchy.</p> </li> <li> <code>children</code>             (<code>list[FrmbFormat]</code>, default:                 <code>None</code> )         \u2013          </li> </ul>"},{"location":"public-api/#frmb.CLI","title":"CLI","text":"<pre><code>CLI(argv: Sequence[str] | None = None)\n</code></pre> <p>\"Command line interface\".</p> <p>Parse user arguments and retrieve their value as a more convenient python object.</p> <p>Parameters:</p> <ul> <li> <code>argv</code>             (<code>Sequence[str] | None</code>, default:                 <code>None</code> )         \u2013          <p>command line arguments. Default uses <code>sys.argv</code>.</p> </li> </ul>"},{"location":"public-api/#frmb.CLI.debug","title":"debug","text":"<pre><code>debug: bool\n</code></pre> <p>True to log debug messages.</p>"},{"location":"public-api/#frmb.CLI.ignore_errors","title":"ignore_errors","text":"<pre><code>ignore_errors: bool\n</code></pre> <p>If True, does not stop (raise) when errors are found in the hierarchy.</p>"},{"location":"public-api/#frmb.CLI.root_dir","title":"root_dir","text":"<pre><code>root_dir: Path\n</code></pre> <p>Filesystem path to an existing directory, root of the context-menu hierarchy.</p>"},{"location":"public-api/#frmb.CLI.target_dir","title":"target_dir","text":"<pre><code>target_dir: Path | None\n</code></pre> <p>Filesystem path to an existing directory, used to create the reg files.</p>"},{"location":"public-api/#frmb.CLI.get_help_message","title":"get_help_message","text":"<pre><code>get_help_message() -&gt; str\n</code></pre> <p>The message displayed when providing the <code>--help</code> argument.</p>"},{"location":"public-api/#frmb.execute_cli","title":"execute_cli","text":"<pre><code>execute_cli(argv: Sequence[str] | None = None)\n</code></pre> <p>Run the CLI using user-provided arguments.</p> <p>Parameters:</p> <ul> <li> <code>argv</code>             (<code>Sequence[str] | None</code>, default:                 <code>None</code> )         \u2013          <p>user command line arguments</p> </li> </ul>"},{"location":"usage/","title":"Usage","text":"<p>You can also check the demo video.</p>"},{"location":"usage/#1-creating-the-file-structure","title":"1. creating the file structure","text":"<p>Start by creating a root directory anywhere on your system. You can decide to create one \"context-menu installer\" for a lot of use-cases at once, or rather multiple of them for each case, which would imply multiple root directories.</p> <p>The choice is just about convenience, or you don't bother having multiple <code>.reg</code> file to execute, or you want a single one for all your context-menus.</p> <p>In that directory start by creating a first <code>.frmb</code> file arbitrary named ( ex: <code>action.frmb</code>).</p> <p>As an example, here is a definitive structure of one of my use-cases:</p> <pre><code>root/\n\u2502   abcinfo.frmb\n\u2502   ffmpeg-to-gifs.frmb\n\u2502   ffmpeg.ico\n\u2502\n\u251c\u2500\u2500\u2500.installers/\n\u2502       install.0001.reg\n\u2502       uninstall.0001.reg\n\u2502\n\u251c\u2500\u2500\u2500abcinfo/\n\u2502       abcinfo-verbose.frmb\n\u2502       abcinfo.frmb\n\u2502\n\u2514\u2500\u2500\u2500ffmpeg-to-gifs/\n    \u2502   ffmpeg-togif.bat\n    \u2502   video-to-gif-interactive.frmb\n    \u2502   video-to-gif-presets.frmb\n    \u2502\n    \u2514\u2500\u2500\u2500video-to-gif-presets/\n            togif-24fps-sd1-floyd.frmb\n            togif-50fps-sd1-sierra24a.frmb\n            ...\n</code></pre> <p>Which I use with the command :</p> <pre><code>python -m frmb ./root --target-dir ./root/.installers \n</code></pre> <p>The whole example can be found at https://github.com/MrLixm/lxm-frmb-projects</p>"},{"location":"usage/#the-frmb-file","title":"the <code>.frmb</code> file.","text":"<p>Each <code>.frmb</code> file represent an individual menu in the \"global\" context-menu.</p> <p>Note</p> <p><code>.frmb</code> files are just regular <code>.json</code> files with a different extension.</p> <p>Its content specify how to configure the menu in the GUI.</p> <p>The name of the file matters as it is used in the path of the registry key. Fortunately Windows have no limitation on that side and allows for special  characters.</p> <p>Sorting Tip</p> <p>This behaviour allow you to sort menus in the GUI. By default  Windows sort them alphabetically where <code>display.frmb</code> would be uppermore than <code>export.frmb</code>. If you wanted the inverse you could instead use <code>01export.frmb</code> and <code>02display.frmb</code>.</p> <p>Content of the file is bound to the json syntax and can be structured as follows :</p> <pre><code>{\n  \"name\": \"\",\n  \"icon\": \"\",\n  \"paths\": [\"\"],\n  \"command\": [\"\"]\n}\n</code></pre>"},{"location":"usage/#keys","title":"keys","text":"<p>Other keys are allowed but not used.</p> <code>name</code><code>icon</code><code>paths</code><code>command</code> <p>Used as label in the GUI. Any kind of string with any character.</p> <p>A path to an absolute existing <code>.ico</code> file.</p> <p>Must use backslackes which are escaped <code>\\\\</code> in json.</p> <p>Supports:</p> <ul> <li>path to a <code>.exe</code> file (their icon will be used by Windows)</li> <li>environment variables like <code>%MY_VAR%</code></li> <li> tokens</li> </ul> <p>List of Windows registry keys paths. The context-menu will be duplicated for each key path in the list.</p> <p>Must use backslackes which are escaped <code>\\\\</code> in json.</p> <p>Example to create a context-menu only on files with the <code>.abc</code> extension: </p> <pre><code>paths = [\"HKEY_CURRENT_USER\\\\Software\\\\Classes\\\\SystemFileAssociations\\\\.abc\"]\n</code></pre> <p>List of command line arguments executed when the menu is pressed.</p> <p>Support  tokens.</p> <p>Example to start a terminal and echo a message:</p> <pre><code>command = [\"cmd\", \"/k\", \"echo\", \"hello world\"]\n</code></pre> <p>Be careful to properly escape anything that should be.</p> <p>Example to start a <code>.bat</code> stored next to the <code>.frmb</code> file:</p> <pre><code>command = [\"cmd\", \"/k\", \"\\\"@CWD\\\\\\\\scripts\\\\\\\\launcher.bat\\\"\"]\n</code></pre>"},{"location":"usage/#tokens","title":"tokens","text":"<p>Some keys can have their value including a token that is replaced when the file is read.</p> <p>A token is added to a string using the syntax <code>@TOKEN_NAME</code>.</p> <p>Example: <code>\"@CWD\\\\file.ico\"</code> could be resolved to <code>\"D:\\\\os\\\\menus\\\\root\\\\file.ico\"</code></p> <code>CWD</code><code>ROOT</code> <p>The parent directory of the <code>frmb</code> file (with escaped backslashes).</p> <p>The top-level directory of the context-menu hierarchy (with escaped backslashes).</p> <p>If you need the <code>@</code> character to be interpreted literally, you can escape it by doubling it. </p> <p>Example: <code>\"@CWD\\\\file@@ROOT.ico\"</code> could be resolved to <code>\"D:\\\\os\\\\menus\\\\root\\\\file@ROOT.ico\"</code></p>"},{"location":"usage/#types","title":"\"types\"","text":"<p>You can distinguish 2 types of frmb file :</p> <ul> <li> <code>root files</code> are located directly in the root directory. <p>they must always specify a <code>paths</code> key with at least one path.</p> </li> <li> <code>nested files</code> are at least one directory deep from the root directory. <p>they do not need the <code>paths</code> key.</p> </li> </ul> <p>Which can be further refined in 2 additional types :</p> <ul> <li> <code>directory files</code> have the same file name as a next-to directory. <p>they do not need a <code>command</code> key.</p> </li> <li> <code>lowest level files</code> which represent a menu that will execute a command <p>they need a <code>command</code> key else they are useless.</p> </li> </ul> <p>Example:</p> <pre><code>root/\n\u2502   maketx.frmb  # root / lowest level\n\u2502   ffmpeg-to-gifs.frmb  # root / directory\n\u2502\n\u2514\u2500\u2500\u2500ffmpeg-to-gifs/\n    \u2502   ffmpeg-togif.bat\n    \u2502   video-to-gif-interactive.frmb  # nested / lowest level\n    \u2502   video-to-gif-presets.frmb  # nested / directory\n    \u2502\n    \u2514\u2500\u2500\u2500video-to-gif-presets/\n            togif-24fps-sd1-floyd.frmb  # nested / lowest level\n            togif-50fps-sd1-sierra24a.frmb  # nested / lowest level\n</code></pre>"},{"location":"usage/#2-running-frmb","title":"2. running frmb","text":"<p><code>frmb</code> is mainly intended to be used as CLI but could also be used as a python library for advanced use-cases.</p>"},{"location":"usage/#as-a-command-line-tool","title":"as a command line tool","text":"<p>Assuming python is installed and frmb is available in the <code>PYTHONPATH</code>:</p> <pre><code>python -m frmb --help\n</code></pre> <pre><code>usage: frmb [-h] [--target-dir TARGET_DIR] [--debug] [--ignore-errors]\n            root_dir\n\nConvert file structures to right-click context menu for Windows.\n\npositional arguments:\n  root_dir              Path to an existing directory containing context-menu\n                        entries.\n\noptions:\n  -h, --help            show this help message and exit\n  --target-dir TARGET_DIR\n                        Path to an existing directory where the reg file must\n                        be created. Default is root-dir.\n  --debug               Output debug logging.\n  --ignore-errors       Doesn't raise when errors are found. Use at your own\n                        risk.\n</code></pre> <p>with the file structure example shared in the first section :</p> <pre><code>python -m frmb ./root --target-dir ./root/.installers \n</code></pre> <p>the <code>.reg</code> files will then be found in <code>./root/.installers</code></p>"},{"location":"usage/#as-a-python-module","title":"as a python module","text":"<p>Check the public-api page for the documentation of available objects.</p> <pre><code>from pathlib import Path\nimport frmb\n\nroot_dir = Path(\"D:/some/dir\")\nhierarchy = frmb.read_hierarchy_from_root(root_dir)\nreg_content = frmb.generate_reg_from_hierarchy(hierarchy)\n\nprint(\"\\n\".join(reg_content))\n</code></pre> <p>Tip</p> <p>At any time you can add have a look the unittests in <code>tests/</code> for an actual example of the python API.</p>"},{"location":"usage/#3-executing-the-reg-files","title":"3. executing the reg files","text":"<p>Warning</p> <p>Registry manipulation can lead to data loss. It is recommended to back up you registry before editing it.</p> <p>The script execution should produce 2 <code>.reg</code> files at the specified location. One \"install\" the context-menu by adding reg keys while the other \"uninstall\" by removing the reg keys.</p> <p>All the reg files are versioned and incremented on each run, based on the last  found version on disk. This is a safety to ensure you can fully uninstall a previously installed context-menu after you run frmb with the updates to  your hierarchy.</p>"},{"location":"usage/#uninstalling","title":"uninstalling","text":"<p>The logic here is simple, if you installed your context-menu with the <code>install.0003.reg</code> file, you MUST uninstall with the same version <code>uninstall.0003.reg</code>.</p> <p>It is up to you to keep track of which version you used to install (you could create a wrapper script or something in that style).</p>"},{"location":"usage/#4-updating-the-file-structure","title":"4. updating the file structure","text":"<p>When you already installed the context-menu but wish to fix/bring modification to it.</p> <p>Assuming frmb as been at least run once to produce the version <code>0001</code>, the overall workflow is as follows :</p> <pre><code>graph LR\n  un[\"uninstall.0001.reg\"];\n  up[\"update file structure\"];\n  ru[\"run frmb\"];\n  in[\"install.0002.reg\"];\n  up--&gt;ru--&gt;un--&gt;in;</code></pre> <p>There is nothing special here, you can just edit, add or remove your <code>.frmb</code> files. Then call <code>frmb</code> once satisified.</p> <p>Make sure to respect what is mentioned in the above uninstalling section.</p> <p>Tip</p> <p>It is recommended to version-control your root directory. So you can track changes and revert to previous versions in case of issues.</p> <p>Tip</p> <p>If your hierarchy is version-controlled on GitHub, you can add a <code>.gitattributes</code> file to specify <code>.frmb</code> as being JSON for syntax highlighting:  https://github.com/github-linguist/linguist/blob/master/docs/overrides.md</p>"}]}